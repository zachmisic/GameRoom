When we first decided to design our game in c++, we knew that coming up with a deployment plan for it in project 4 would be relatively difficult because most people don't play games in their terminal. However, through searches on the internet and our own prior knowledge of file distribution, we came up with a plan to distribute the game over the internet. The time that required most thinking about was the dynamically linked libraries used in a couple of the .cpp files that provide the main functionality of the game. Luckily, most of these libraries are readily available on most linux machines thus providing a solution to our problem. If we were to actually go about releasing this we would fix any other instances of this problem by defining the path to the shared libraries in the script. If we chose to distribute the program across other operating systems such as Windows and MacOS, there would be other changes necessary. These might include removal and replacement of linux dependent libraries. If we did this, we would also want to create an installer for each operating system we release it to to prevent the user from needing to compile the code to play. This reduces the chance of errors and decreases the need for future maintenance of the code itself as well. In the immediate future the program was designed so the code could be packaged as a whole, and distributed freely on many open source sites. This game was created to be a set of quick games that people could play when they were bored. It is marketed towards office workers and students who spend a lot of time on their computer and may need a focus break every so often. Similarly to how everyone had solitaire and minesweeper installed on their PC automatically, the end game for this program is that it is installed on most PCs that come with a specific operating system. Before this specific operating system is chosen, the program must be edited to contain the correct libraries and therefore modified so it cannot be edited by the user. It will become embedded. It is designed so that it can be run an infinite amount of times without causing any memory issues, thus maximizing its power as a time-passing game and something useful or even fun for anyone with that OS. This game could also be kept as source code, and marketed to people trying to figure out how games work in c++. This would require little to no distribution costs as source code is readily available to anyone with internet access, and little to no maintenance would be required as that could be part of the learning process. Because it is such an easily modifiable program, it could be something that people add to for a very long time, simply expanding the list of games on the menu and developing those games until they are in the most efficient form code-wise and performance-wise. While each of these marketing strategies require different deployment costs, both can be done quite quickly. The costs for the first market includes rights to the OS code and an exclusivity contract with the OS developer, so that it could be packaged with the OS when it is bought and people won't even have to worry about the game until they want to play it. The immediate future, aside from designing an installer which may just include labor costs and costs for uploading it to a website, will be free. As will uploading the source code to a website similar to GitHub designed for people to play with it.   